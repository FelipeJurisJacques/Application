@implements IObserver
@using Application.Source.Utils
@using Application.Source.Helpers
@using Application.Source.Utils.Observer
@inherits Application.Source.Helpers.Widget
@inject Application.Source.Utils.Screen screen
@using Application.Source.Layouts.Components.Svgs

<div style="@style">
    <button class=" bar" @onclick="ToggleDropdown" type="button" title="theme">
        <Sun />
        @* @switch (context.Themes.Theme.Name)
        {
            case "light":
                <Sun />
                break;
            case "high_contrast":
                <HighContrast />
                break;
            case "dark":
            default:
                <Moon />
                break;
        } *@
    </button>
    <ul class="@(showDropdown ? "visible" : "hidden")">
        <li>
            <button @onclick="SetDarkTheme" type="button">
                <Moon />
            </button>
        </li>
        <li>
            <button @onclick="SetLightTheme">
                <Sun />
            </button>
        </li>
        <li>
            <button @onclick="SetHighContrastTheme">
                <HighContrast />
            </button>
        </li>
    </ul>
</div>

@code {
    private string style = "";
    private bool showDropdown = false;

    protected override void OnInitialized()
    {
        @* context.Themes.OnChange.Subscribe(this); *@
        screen.Subscribe(this);
        base.OnInitialized();
    }

    public override void Build()
    {
        var width = screen.Width;
        var mw = (int) width / 2;

        var clip = new VectorialScalable(width, 50);
        List<VectorialScalable.Path> paths = [];
        var path = new VectorialScalable.Path();
        path.Add(0, 15);
        path.Add(mw - 170, 15);
        path.Add(mw - 160, 5);
        path.Add(mw - 50, 5);
        path.Add(mw - 40, 15);
        path.Add(mw + 40, 15);
        path.Add(mw + 50, 5);
        path.Add(mw + 160, 5);
        path.Add(mw + 170, 15);
        path.Add(width, 15);
        path.Add(width, 50);
        path.Add(0, 50);
        path.Add(0, 15);
        paths.Add(path);

        path = new VectorialScalable.Path();
        for (int i = 0; i < 50; i += 2)
        {
            path.Add(0, i);
            path.Add(width, i);
            path.Add(width, i + 1);
            path.Add(0, i + 1);
            path.Add(0, i);
        }
        paths.Add(path);
        clip.AddPolygon(paths, "#1a1a1a");

        path = new VectorialScalable.Path();
        path.Add(0, 15);
        path.Add(mw - 170, 15);
        path.Add(mw - 160, 5);
        path.Add(mw - 50, 5);
        path.Add(mw - 40, 15);
        path.Add(mw + 40, 15);
        path.Add(mw + 50, 5);
        path.Add(mw + 160, 5);
        path.Add(mw + 170, 15);
        path.Add(width, 15);
        path.Add(width, 17);
        path.Add(mw + 169, 17);
        path.Add(mw + 159, 7);
        path.Add(mw + 51, 7);
        path.Add(mw + 41, 17);
        path.Add(mw - 41, 17);
        path.Add(mw - 51, 7);
        path.Add(mw - 159, 7);
        path.Add(mw - 169, 17);
        path.Add(0, 17);
        path.Add(0, 15);
        clip.AddPolygon(path, "#00f2ff");

        style = clip.GetStyle();
    }

    private void ToggleDropdown()
    {
        showDropdown = !showDropdown;
        StateHasChanged();
    }

    public void Update(Subject theme)
    {
        @* if (theme is Themes.OnChangeSubject)
        {
            StateHasChanged();
        } *@
    }

    private async void SetDarkTheme()
    {
        @* await context.Themes.SetCurrentThemeName("dark"); *@
    }

    private async void SetLightTheme()
    {
        @* await context.Themes.SetCurrentThemeName("light"); *@
    }

    private async void SetHighContrastTheme()
    {
        @* await context.Themes.SetCurrentThemeName("high_contrast"); *@
    }
}