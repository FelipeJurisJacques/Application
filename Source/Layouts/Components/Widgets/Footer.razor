@implements IObserver
@using Application.Source.Utils
@using Application.Source.Helpers
@using Application.Source.Utils.Observer
@inherits Application.Source.Helpers.Widget
@inject Application.Source.Utils.Screen screen
@using Application.Source.Layouts.Components.Svgs

<div style="@style">
    <button class=" bar" @onclick="ToggleDropdown" type="button" title="theme">
        <Sun />
        @* @switch (context.Themes.Theme.Name)
        {
            case "light":
                <Sun />
                break;
            case "high_contrast":
                <HighContrast />
                break;
            case "dark":
            default:
                <Moon />
                break;
        } *@
    </button>
    <ul class="@(showDropdown ? "visible" : "hidden")">
        <li>
            <button @onclick="SetDarkTheme" type="button">
                <Moon />
            </button>
        </li>
        <li>
            <button @onclick="SetLightTheme">
                <Sun />
            </button>
        </li>
        <li>
            <button @onclick="SetHighContrastTheme">
                <HighContrast />
            </button>
        </li>
    </ul>
</div>

@code {
    private string style = "";
    private bool showDropdown = false;

    protected override void OnInitialized()
    {
        @* context.Themes.OnChange.Subscribe(this); *@
        screen.Subscribe(this);
        base.OnInitialized();
    }

    public override void Render()
    {
        var clip = new VectorialScalable(screen.Width, screen.Height);
        style = clip.GetStyle();
        base.Render();
    }

    private void ToggleDropdown()
    {
        showDropdown = !showDropdown;
        StateHasChanged();
    }

    public void Update(Subject theme)
    {
        @* if (theme is Themes.OnChangeSubject)
        {
            StateHasChanged();
        } *@
    }

    private async void SetDarkTheme()
    {
        @* await context.Themes.SetCurrentThemeName("dark"); *@
    }

    private async void SetLightTheme()
    {
        @* await context.Themes.SetCurrentThemeName("light"); *@
    }

    private async void SetHighContrastTheme()
    {
        @* await context.Themes.SetCurrentThemeName("high_contrast"); *@
    }

    private string GetClipPathBorder()
    {
        List<string> points = [];
        points.Add("0% 15px");
        points.Add("calc(50% - 170px) 15px");
        points.Add("calc(50% - 160px) 5px");
        points.Add("calc(50% - 50px) 5px");
        points.Add("calc(50% - 40px) 15px");
        points.Add("calc(50% + 40px) 15px");
        points.Add("calc(50% + 50px) 5px");
        points.Add("calc(50% + 160px) 5px");
        points.Add("calc(50% + 170px) 15px");
        points.Add("100% 15px");
        points.Add("100% 100%");
        points.Add("0% 100%");
        points.Add("0% 15px");
        return "polygon(" + string.Join(", ", points) + ")";
    }

    private string GetClipPathContour()
    {
        List<string> points = [];
        points.Add("0% 15px");
        points.Add("calc(50% - 170px) 15px");
        points.Add("calc(50% - 160px) 5px");
        points.Add("calc(50% - 50px) 5px");
        points.Add("calc(50% - 40px) 15px");
        points.Add("calc(50% + 40px) 15px");
        points.Add("calc(50% + 50px) 5px");
        points.Add("calc(50% + 160px) 5px");
        points.Add("calc(50% + 170px) 15px");
        points.Add("100% 15px");
        points.Add("100% 17px");
        points.Add("calc(50% + 169px) 17px");
        points.Add("calc(50% + 159px) 7px");
        points.Add("calc(50% + 51px) 7px");
        points.Add("calc(50% + 41px) 17px");
        points.Add("calc(50% - 41px) 17px");
        points.Add("calc(50% - 51px) 7px");
        points.Add("calc(50% - 159px) 7px");
        points.Add("calc(50% - 169px) 17px");
        points.Add("0% 17px");
        points.Add("0% 15px");
        return "polygon(" + string.Join(", ", points) + ")";
    }

    private string GetClipPathBackground()
    {
        List<string> points = [];
        for (int i = 0; i < 100; i += 2)
        {
            points.Add($"0% {i}%");
            points.Add($"100% {i}%");
            points.Add($"100% {i + 1}%");
            points.Add($"0% {i + 1}%");
            points.Add($"0% {i}%");
        }
        return "polygon(" + string.Join(", ", points) + ")";
    }

    private string GetSvg()
    {
        var width = 340;
        var height = 30;
        List<string> points = [];
        points.Add($"50 5");
        points.Add($"{width - 10} 5");
        points.Add($"{width} {height}");
        points.Add($"0 {height}");
        points.Add($"50 5");
        var path = string.Join(" ", points);
        var svg = "<svg width='100%' height='100%' xmlns='http://www.w3.org/2000/svg'>";
        svg += "<clipPath id='clip'>";
        svg += $"<polygon points='{path}' />";
        svg += "</clipPath>";
        svg += "<rect x='calc(50% - 170px)' y='0%' width='340px' height='30%' clip-path='url(#clip)' />";
        @* svg += "<rect x='0%' y='30%' width='100%' height='70%' />"; *@
        svg += "</svg>";
        return $"url('data:image/svg+xml,{Uri.EscapeDataString(svg)}')";
    }
}